import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class EmployeeDAO {
    private Connection connection;

    public EmployeeDAO() throws SQLException {
        connection = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe", "username", "password");
    }

    public static void initializeDatabase() throws SQLException {
        try (Connection connection = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe", "username", "password");
             Statement statement = connection.createStatement()) {
            statement.executeUpdate("DROP TABLE IF EXISTS employees");
            statement.executeUpdate("CREATE TABLE employees (id NUMBER GENERATED BY DEFAULT AS IDENTITY, name VARCHAR2(50), email VARCHAR2(50), country VARCHAR2(50), PRIMARY KEY (id))");
        }
    }

    public void insertEmployee(Employee employee) throws SQLException {
        String sql = "INSERT INTO employees (name, email, country) VALUES (?, ?, ?)";
        try (PreparedStatement statement = connection.prepareStatement(sql)) {
            statement.setString(1, employee.getName());
            statement.setString(2, employee.getEmail());
            statement.setString(3, employee.getCountry());
            statement.executeUpdate();
        }
    }

    public List<Employee> getAllEmployees() throws SQLException {
        List<Employee> employees = new ArrayList<>();
        String sql = "SELECT * FROM employees";
        try (Statement statement = connection.createStatement();
             ResultSet resultSet = statement.executeQuery(sql)) {
            while (resultSet.next()) {
                Employee employee = new Employee(
                        resultSet.getInt("id"),
                        resultSet.getString("name"),
                        resultSet.getString("email"),
                        resultSet.getString("country")
                );
                employees.add(employee);
            }
        }
        return employees;
    }

    public void updateEmployeeById(int id, String name, String email, String country) throws SQLException {
        String sql = "UPDATE employees SET name = ?, email = ?, country = ? WHERE id = ?";
        try (PreparedStatement statement = connection.prepareStatement(sql)) {
            statement.setString(1, name);
            statement.setString(2, email);
            statement.setString(3, country);
            statement.setInt(4, id);
            statement.executeUpdate();
        }
    }

    public void updateEmployeeByName(String oldName, String newName, String email, String country) throws SQLException {
        String sql = "UPDATE employees SET name = ?, email = ?, country = ? WHERE name = ?";
        try (PreparedStatement statement = connection.prepareStatement(sql)) {
            statement.setString(1, newName);
            statement.setString(2, email);
            statement.setString(3, country);
            statement.setString(4, oldName);
            statement.executeUpdate();
        }
    }

    public void updateEmployeeByEmail(String oldEmail, String name, String newEmail, String country) throws SQLException {
        String sql = "UPDATE employees SET name = ?, email = ?, country = ? WHERE email = ?";
        try (PreparedStatement statement = connection.prepareStatement(sql)) {
            statement.setString(1, name);
            statement.setString(2, newEmail);
            statement.setString(3, country);
            statement.setString(4, oldEmail);
            statement.executeUpdate();
        }
    }

    public void deleteEmployee(int id) throws SQLException {
        String sql = "DELETE FROM employees WHERE id = ?";
        try (PreparedStatement statement = connection.prepareStatement(sql)) {
            statement.setInt(1, id);
            statement.executeUpdate();
        }
    }

    public void batchInsertEmployees(List<Employee> employees) throws SQLException {
        String sql = "INSERT INTO employees (name, email, country) VALUES (?, ?, ?)";
        try (PreparedStatement statement = connection.prepareStatement(sql)) {
            for (Employee employee : employees) {
                statement.setString(1, employee.getName());
                statement.setString(2, employee.getEmail());
                statement.setString(3, employee.getCountry());
                statement.addBatch();
            }
            statement.executeBatch();
        }
    }

    public void printEmployee() throws SQLException {
        List<Employee> employees = getAllEmployees();
        for (Employee employee : employees) {
            System.out.println(employee);
        }
    }
}